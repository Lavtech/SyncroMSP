import dash
from dash import html, dcc, Input, Output
import plotly.graph_objects as go
import os

# Initialize the Dash app with Bootstrap CSS for better styling
app = dash.Dash(__name__, external_stylesheets=['https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'])

# Function to read the last saved value
def read_last_value():
    try:
        with open("last_value.txt", "r") as file:
            return float(file.read().strip())
    except (FileNotFoundError, ValueError):
        return 35  # default value if no file found or value is invalid

# Function to save the current value
def save_last_value(value):
    with open("last_value.txt", "w") as file:
        file.write(str(value))

# Read the initial value
initial_value = read_last_value()

# Define the layout of the app using Bootstrap classes for better styling
app.layout = html.Div([
    dcc.Graph(id='gauge-graph'),
    html.Div([
        html.Label("Enter Billed Hours:", className="h5"),
        dcc.Input(
            id='input-value', 
            type='number', 
            value=initial_value, 
            className="form-control", 
            style={'margin': '10px', 'width': 'auto', 'display': 'inline-block'}
        ),
        html.Button('Update', id='update-button', n_clicks=0, className="btn btn-primary")
    ], className="d-flex justify-content-center align-items-center mt-3"),
], className="container mt-5")

# Define the callback to update the gauge graph and save the last value
@app.callback(
    Output('gauge-graph', 'figure'),
    [Input('update-button', 'n_clicks')],
    [dash.dependencies.State('input-value', 'value')]
)
def update_graph(n_clicks, input_value):
    save_last_value(input_value)  # Save the current value to a file
    # Create a Plotly gauge graph
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=input_value,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': "Billed Hours", 'font': {'size': 24}},
        delta={'reference': 35, 'increasing': {'color': "RebeccaPurple"}},
        gauge={
            'axis': {'range': [None, 35], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': "darkblue"},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [0, 20], 'color': 'cyan'},
                {'range': [20, 35], 'color': 'green'}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 35}
        }))
    fig.update_layout(paper_bgcolor="lavender", font={'color': "darkblue", 'family': "Arial"})
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
