import requests
import json

def main():
    api_url = 'https://lavtech.syncromsp.com/api/v1/'
    headers = {'Authorization': 'Bearer T32cb3794c45db370e-87ff666818e21d72f5e3273164b02c89'}
    timer_search_url = f"{api_url}ticket_timers?created_at_gt=2024-4-20"

    # List to hold ticket IDs for later use
    ticket_ids = []

    try:
        response = requests.get(timer_search_url, headers=headers)
        response.raise_for_status()
        ticket_timers_data = response.json()

        # Collect ticket IDs from timers that do not have "See Tech Notes"
        for timer in ticket_timers_data.get('ticket_timers', []):
            if timer.get('notes') != "See Tech Notes":
                ticket_ids.append(timer.get('ticket_id'))
                print(f"Timer ID: {timer.get('id')}, Ticket ID: {timer.get('ticket_id')}, Active Duration: {timer.get('active_duration')}, Created At: {timer.get('created_at')}")

    except requests.RequestException as e:
        print(f"An error occurred: {e}")

    try:
        # Iterate over each ticket ID collected from ticket timers
        for ticket_id in ticket_ids:
            ticket_details_url = f"{api_url}tickets/{ticket_id}"
            response = requests.get(ticket_details_url, headers=headers)
            response.raise_for_status()
            ticket_details = response.json()

            # Assuming each ticket detail fetch is successful and the JSON structure is as expected
            ticket_number = ticket_details.get('number')
            created_at = ticket_details.get('created_at')
            print(f"Ticket ID: {ticket_id}, Ticket Number: {ticket_number}, Created At: {created_at}")

    except requests.RequestException as e:
        print(f"An error occurred: {e}")

main()  # Uncomment this line to run the function when testing locally
